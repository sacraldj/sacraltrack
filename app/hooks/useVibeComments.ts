import { useState, useCallback } from 'react';
import { database, Query, ID } from '@/libs/AppWriteClient';
import { useUser } from '@/app/context/user';

interface VibeComment {
  id: string;
  user_id: string;
  vibe_id: string;
  text: string;
  created_at: string;
  profile?: {
    user_id: string;
    name: string;
    image: string;
    username?: string;
  };
}

// –ü–æ–ø—É–ª—è—Ä–Ω—ã–µ —ç–º–æ–¥–∑–∏ –¥–ª—è –º—É–∑—ã–∫–∞–ª—å–Ω—ã—Ö –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤
export const MUSIC_EMOJIS = [
  'üéµ', 'üé∂', 'üé∏', 'ü•Å', 'üé§', 'üéß', 'üé∑', 'üéπ', 'üé∫', 'üéª',
  'üëè', 'üî•', '‚ù§Ô∏è', 'üíØ', '‚ú®', 'üôå', 'üëç', 'üíÉ', 'üï∫', 'üòç'
];

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
const normalizeVibeStats = (stats: any): { total_likes: string; total_comments: string; total_views: string } => {
  // –ï—Å–ª–∏ stats —ç—Ç–æ –º–∞—Å—Å–∏–≤
  if (Array.isArray(stats)) {
    const statsArray = [...stats];
    while (statsArray.length < 3) statsArray.push('0');
    return {
      total_likes: statsArray[0] || '0',
      total_comments: statsArray[1] || '0',
      total_views: statsArray[2] || '0'
    };
  }
  
  // –ï—Å–ª–∏ stats —ç—Ç–æ –æ–±—ä–µ–∫—Ç
  if (typeof stats === 'object' && stats !== null && !Array.isArray(stats)) {
    return {
      total_likes: typeof stats.total_likes === 'number' ? stats.total_likes.toString() : (stats.total_likes || '0'),
      total_comments: typeof stats.total_comments === 'number' ? stats.total_comments.toString() : (stats.total_comments || '0'),
      total_views: typeof stats.total_views === 'number' ? stats.total_views.toString() : (stats.total_views || '0')
    };
  }
  
  // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –Ω—É–ª–∏ –≤ —Å—Ç—Ä–æ–∫–æ–≤–æ–º –≤–∏–¥–µ
  return {
    total_likes: '0',
    total_comments: '0',
    total_views: '0'
  };
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –æ–±—Ä–∞—Ç–Ω–æ –≤ –º–∞—Å—Å–∏–≤
const statsToArray = (stats: { total_likes: string; total_comments: string; total_views: string }): string[] => {
  // Make sure we're returning strings, not objects that might be converted to "[object Object]"
  const likes = stats.total_likes || '0';
  const comments = stats.total_comments || '0';
  const views = stats.total_views || '0';
  
  return [likes, comments, views];
};

export const useVibeComments = (vibeId?: string) => {
  const [comments, setComments] = useState<VibeComment[]>([]);
  const [isLoading, setIsLoading] = useState(false);
  const [error, setError] = useState<string | null>(null);
  const userContext = useUser();
  const user = userContext?.user;

  const fetchComments = async () => {
    if (!vibeId) {
      setComments([]);
      return;
    }

    try {
      setIsLoading(true);
      setError(null);

      const response = await database.listDocuments(
        process.env.NEXT_PUBLIC_DATABASE_ID!,
        process.env.NEXT_PUBLIC_COLLECTION_ID_VIBE_COMMENTS!,
        [
          Query.equal('vibe_id', vibeId),
          Query.orderDesc('created_at')
        ]
      );

      // Fetch profiles for each comment
      const commentsWithProfiles = await Promise.all(
        response.documents.map(async (doc) => {
          let profile;
          try {
            const profileResponse = await database.listDocuments(
              process.env.NEXT_PUBLIC_DATABASE_ID!,
              process.env.NEXT_PUBLIC_COLLECTION_ID_PROFILE!,
              [Query.equal('user_id', doc.user_id)]
            );
            
            if (profileResponse.documents.length > 0) {
              const profileDoc = profileResponse.documents[0];
              profile = {
                user_id: profileDoc.user_id,
                name: profileDoc.name,
                image: profileDoc.image,
                username: profileDoc.username
              };
            }
          } catch (profileError) {
            console.error('Error fetching profile:', profileError);
          }

          return {
            id: doc.$id,
            user_id: doc.user_id,
            vibe_id: doc.vibe_id,
            text: doc.text,
            created_at: doc.created_at,
            profile
          };
        })
      );

      setComments(commentsWithProfiles);
    } catch (err) {
      console.error('Error fetching vibe comments:', err);
      setError('Failed to load comments');
    } finally {
      setIsLoading(false);
    }
  };

  // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —ç–º–æ–¥–∑–∏ –≤ —Ç–µ–∫—Å—Ç –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è
  const addEmojiToComment = useCallback((emoji: string, commentText: string) => {
    return commentText + emoji;
  }, []);

  const addComment = async (textOrComment: string | VibeComment, replaceId?: string) => {
    if (!vibeId || !user?.id) {
      setError('You must be logged in to comment');
      throw new Error('You must be logged in to comment');
    }

    try {
      setIsLoading(true);
      setError(null);

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–æ–ª—É—á–∏–ª–∏ –ª–∏ –º—ã –≥–æ—Ç–æ–≤—ã–π –æ–±—ä–µ–∫—Ç –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è –∏–ª–∏ —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç
      if (typeof textOrComment === 'string') {
        // –ï—Å–ª–∏ –ø–æ–ª—É—á–µ–Ω–∞ —Å—Ç—Ä–æ–∫–∞, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π
        const text = textOrComment;
        const commentId = ID.unique();
        const currentTime = new Date().toISOString();

        // –û–ø—Ç–∏–º–∏—Å—Ç–∏—á–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ UI, –¥–æ–±–∞–≤–ª—è–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π —Å—Ä–∞–∑—É
        const optimisticComment: VibeComment = {
          id: commentId,
          user_id: user.id,
          vibe_id: vibeId,
          text,
          created_at: currentTime,
          profile: user ? {
            user_id: user.id,
            name: user.name || 'User',
            image: user.image || '/images/placeholders/user-placeholder.svg',
            username: undefined
          } : undefined
        };

        // –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –≤ –Ω–∞—á–∞–ª–æ —Å–ø–∏—Å–∫–∞ (—Ç.–∫. —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ —É–±—ã–≤–∞–Ω–∏—é –¥–∞—Ç—ã)
        setComments(prevComments => [optimisticComment, ...prevComments]);

        // Create the comment
        const response = await database.createDocument(
          process.env.NEXT_PUBLIC_DATABASE_ID!,
          process.env.NEXT_PUBLIC_COLLECTION_ID_VIBE_COMMENTS!,
          commentId,
          {
            user_id: user.id,
            vibe_id: vibeId,
            text,
            created_at: currentTime
          }
        );

        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤
        await updateCommentStats(1);

        return optimisticComment;
      } else {
        // –ï—Å–ª–∏ –ø–æ–ª—É—á–µ–Ω –≥–æ—Ç–æ–≤—ã–π –æ–±—ä–µ–∫—Ç –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è
        const comment = textOrComment;
        
        if (replaceId) {
          // –ï—Å–ª–∏ –µ—Å—Ç—å ID –¥–ª—è –∑–∞–º–µ–Ω—ã, –æ–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π
          setComments(prevComments => 
            prevComments.map(c => c.id === replaceId ? comment : c)
          );
        } else {
          // –ò–Ω–∞—á–µ –¥–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π
          setComments(prevComments => [comment, ...prevComments]);
        }
        
        return comment;
      }
    } catch (err) {
      console.error('Error adding comment:', err);
      
      // –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ —É–¥–∞–ª—è–µ–º –æ–ø—Ç–∏–º–∏—Å—Ç–∏—á–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π
      if (user?.id && typeof textOrComment === 'string') {
        setComments(prevComments => 
          prevComments.filter(comment => 
            !(comment.user_id === user.id && comment.text === textOrComment && 
              new Date(comment.created_at).getTime() > Date.now() - 10000)
          )
        );
      }
      
      const errorMessage = err instanceof Error ? err.message : 'Failed to add comment';
      setError(errorMessage);
      throw err;
    } finally {
      setIsLoading(false);
    }
  };

  // –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—á–µ—Ç—á–∏–∫–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤
  const updateCommentStats = async (change: number) => {
    if (!vibeId) return;
    
    try {
      const vibeDoc = await database.getDocument(
        process.env.NEXT_PUBLIC_DATABASE_ID!,
        process.env.NEXT_PUBLIC_COLLECTION_ID_VIBE_POSTS!,
        vibeId
      );

      const currentStats = normalizeVibeStats(vibeDoc.stats);
      const updatedStats = {
        ...currentStats,
        total_comments: Math.max(0, parseInt(currentStats.total_comments, 10) + change).toString()
      };

      // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –æ–±—ä–µ–∫—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –≤ –º–∞—Å—Å–∏–≤ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–∞
      const statsForUpdate = statsToArray(updatedStats);
      
      // Log for debugging
      console.log('Updating vibe comment stats:', {
        vibeId,
        currentStats,
        updatedStats,
        statsForUpdate,
        statsType: typeof statsForUpdate
      });

      await database.updateDocument(
        process.env.NEXT_PUBLIC_DATABASE_ID!,
        process.env.NEXT_PUBLIC_COLLECTION_ID_VIBE_POSTS!,
        vibeId,
        { stats: statsForUpdate }
      );
    } catch (statsError) {
      console.error('Error updating vibe stats:', statsError);
    }
  };

  const deleteComment = async (commentId: string) => {
    if (!user?.id) {
      setError('You must be logged in to delete a comment');
      throw new Error('You must be logged in to delete a comment');
    }

    try {
      setIsLoading(true);
      setError(null);

      // Find the comment to check user ownership
      const comment = comments.find(c => c.id === commentId);
      if (!comment) {
        const errorMsg = 'Comment not found';
        setError(errorMsg);
        throw new Error(errorMsg);
      }

      // Only allow the comment author to delete
      if (comment.user_id !== user.id) {
        const errorMsg = 'You can only delete your own comments';
        setError(errorMsg);
        throw new Error(errorMsg);
      }

      // –û–ø—Ç–∏–º–∏—Å—Ç–∏—á–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ UI, —É–¥–∞–ª—è–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π —Å—Ä–∞–∑—É
      setComments(prevComments => prevComments.filter(c => c.id !== commentId));

      // Delete the comment
      await database.deleteDocument(
        process.env.NEXT_PUBLIC_DATABASE_ID!,
        process.env.NEXT_PUBLIC_COLLECTION_ID_VIBE_COMMENTS!,
        commentId
      );

      // –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤
      if (vibeId) {
        await updateCommentStats(-1);
      }
    } catch (err) {
      console.error('Error deleting comment:', err);
      const errorMessage = err instanceof Error ? err.message : 'Failed to delete comment';
      setError(errorMessage);
      
      // –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –∫ –∏—Å—Ö–æ–¥–Ω–æ–º—É —Å–æ—Å—Ç–æ—è–Ω–∏—é
      fetchComments();
      
      throw err;
    } finally {
      setIsLoading(false);
    }
  };

  return {
    comments,
    isLoading,
    error,
    fetchComments,
    addComment,
    deleteComment,
    addEmojiToComment,
    musicEmojis: MUSIC_EMOJIS
  };
}; 