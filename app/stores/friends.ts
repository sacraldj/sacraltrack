import { create } from 'zustand';
import { database, ID, Query } from '@/libs/AppWriteClient';
import { toast } from 'react-hot-toast';
import { useProfileStore } from './profile';
import { account } from '@/libs/AppWriteClient';

// –£—Ç–∏–ª–∏—Ç–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ—Ç–∏—Ñ–∏–∫–∞—Ü–∏–π –æ –¥—Ä—É–∑—å—è—Ö
const createFriendNotification = async (
    userId: string, 
    type: 'friend_request' | 'friend_accepted', 
    senderName: string,
    senderId: string,
    related_document_id?: string
) => {
    try {
        // –°–æ–∑–¥–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        await database.createDocument(
            process.env.NEXT_PUBLIC_DATABASE_ID!,
            process.env.NEXT_PUBLIC_COLLECTION_ID_NOTIFICATIONS!,
            ID.unique(),
            {
                user_id: userId,
                type: type,
                title: type === 'friend_request' 
                    ? 'New Friend Request! üëã' 
                    : 'Friend Request Accepted! üéâ',
                message: type === 'friend_request'
                    ? `${senderName} sent you a friend request. Check your profile to respond.`
                    : `${senderName} accepted your friend request. You are now connected!`,
                sender_id: senderId,
                action_url: type === 'friend_request' 
                    ? '/profile?tab=friends' 
                    : `/profile/${senderId}`,
                related_document_id: related_document_id,
                created_at: new Date().toISOString(),
                read: false
            }
        );
    } catch (error) {
        console.error(`Error creating ${type} notification:`, error);
    }
};

// –£—Ç–∏–ª–∏—Ç–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
const getUserName = async (userId: string): Promise<string> => {
    try {
        const profile = await database.listDocuments(
            process.env.NEXT_PUBLIC_DATABASE_ID!,
            process.env.NEXT_PUBLIC_COLLECTION_ID_PROFILE!,
            [Query.equal('user_id', userId)]
        );
        
        if (profile.documents.length > 0) {
            return profile.documents[0].name || 'User';
        }
        return 'User';
    } catch (error) {
        console.error('Error getting user name:', error);
        return 'User';
    }
};

// –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
const getUserProfile = async (userId: string) => {
    try {
        const profile = await database.listDocuments(
            process.env.NEXT_PUBLIC_DATABASE_ID!,
            process.env.NEXT_PUBLIC_COLLECTION_ID_PROFILE!,
            [Query.equal('user_id', userId)]
        );
        
        if (profile.documents.length > 0) {
            return profile.documents[0];
        }
        return null;
    } catch (error) {
        console.error('Error getting user profile:', error);
        return null;
    }
};

interface Friend {
    id: string;
    userId: string;
    friendId: string;
    status: 'pending' | 'accepted' | 'rejected';
    createdAt: string;
    updatedAt?: string;
    profile?: any; // –ü—Ä–æ—Ñ–∏–ª—å –¥—Ä—É–≥–∞
}

interface FriendsStore {
    friends: Friend[];
    pendingRequests: Friend[];
    sentRequests: Friend[];
    loading: boolean;
    error: string | null;
    addFriend: (friendId: string, currentUserId?: string) => Promise<void>;
    removeFriend: (friendId: string) => Promise<void>;
    acceptFriendRequest: (requestId: string) => Promise<void>;
    rejectFriendRequest: (requestId: string) => Promise<void>;
    loadFriends: (currentUserId?: string) => Promise<void>;
    loadPendingRequests: (currentUserId?: string) => Promise<void>;
    loadSentRequests: (currentUserId?: string) => Promise<void>;
}

export const useFriendsStore = create<FriendsStore>((set, get) => ({
    friends: [],
    pendingRequests: [],
    sentRequests: [],
    loading: false,
    error: null,

    addFriend: async (friendId: string, currentUserId?: string) => {
        try {
            set({ loading: true, error: null });
            // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–π userId, –∑–∞—Ç–µ–º –∏–∑ localStorage
            let userId = currentUserId;
            if (!userId) {
                const storedUserId = localStorage.getItem('userId');
                if (storedUserId) {
                    userId = storedUserId;
                }
            }
            
            // If userId is still not found, try to get it from the current session
            if (!userId) {
                try {
                    const currentAccount = await account.get();
                    if (currentAccount) {
                        userId = currentAccount.$id;
                        // Store it in localStorage for future use
                        localStorage.setItem('userId', userId);
                    }
                } catch (error) {
                    console.error('Error getting current user:', error);
                }
            }
            
            if (!userId) {
                throw new Error('User not authenticated');
            }

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ –∑–∞–ø—Ä–æ—Å –Ω–∞ –¥—Ä—É–∂–±—É –≤ –ª—é–±–æ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–∏
            const existingFriendship = await database.listDocuments(
                process.env.NEXT_PUBLIC_DATABASE_ID!,
                process.env.NEXT_PUBLIC_COLLECTION_ID_FRIENDS!,
                [
                    Query.equal('user_id', userId),
                    Query.equal('friend_id', friendId)
                ]
            );

            const existingReverseRequest = await database.listDocuments(
                process.env.NEXT_PUBLIC_DATABASE_ID!,
                process.env.NEXT_PUBLIC_COLLECTION_ID_FRIENDS!,
                [
                    Query.equal('user_id', friendId),
                    Query.equal('friend_id', userId)
                ]
            );

            if (existingFriendship.documents.length > 0 || existingReverseRequest.documents.length > 0) {
                throw new Error('Friendship already exists');
            }

            // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –Ω–∞ –¥—Ä—É–∂–±—É
            const friendDoc = await database.createDocument(
                process.env.NEXT_PUBLIC_DATABASE_ID!,
                process.env.NEXT_PUBLIC_COLLECTION_ID_FRIENDS!,
                ID.unique(),
                {
                    user_id: userId,
                    friend_id: friendId,
                    status: 'pending',
                    created_at: new Date().toISOString()
                }
            );

            // –ü–æ–ª—É—á–∞–µ–º –∏–º—è –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è –∏ —Å–æ–∑–¥–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
            const senderName = await getUserName(userId);
            await createFriendNotification(
                friendId,
                'friend_request',
                senderName,
                userId,
                friendDoc.$id
            );

            toast.success('Friend request sent successfully!');
            
            // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
            await get().loadSentRequests();
        } catch (error: any) {
            console.error('Error sending friend request:', error);
            set({ error: error.message || 'Failed to send friend request' });
            toast.error(error.message || 'Failed to send friend request');
        } finally {
            set({ loading: false });
        }
    },

    removeFriend: async (friendId: string) => {
        try {
            set({ loading: true, error: null });
            // Try to get userId from localStorage first
            let userId = localStorage.getItem('userId');
            
            // If userId is not in localStorage, try to get it from the current session
            if (!userId) {
                try {
                    const currentAccount = await account.get();
                    if (currentAccount) {
                        userId = currentAccount.$id;
                        // Store it in localStorage for future use
                        localStorage.setItem('userId', userId);
                    }
                } catch (error) {
                    console.error('Error getting current user:', error);
                }
            }
            
            if (!userId) throw new Error('User not authenticated');
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±–∞ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥—Ä—É–∂–±—ã
            const friendshipAsInitiator = await database.listDocuments(
                process.env.NEXT_PUBLIC_DATABASE_ID!,
                process.env.NEXT_PUBLIC_COLLECTION_ID_FRIENDS!,
                [
                    Query.equal('status', 'accepted'),
                    Query.equal('user_id', userId),
                    Query.equal('friend_id', friendId)
                ]
            );
            
            const friendshipAsReceiver = await database.listDocuments(
                process.env.NEXT_PUBLIC_DATABASE_ID!,
                process.env.NEXT_PUBLIC_COLLECTION_ID_FRIENDS!,
                [
                    Query.equal('status', 'accepted'),
                    Query.equal('user_id', friendId),
                    Query.equal('friend_id', userId)
                ]
            );

            // –û–±—ä–µ–¥–∏–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            const friendshipDocuments = [
                ...friendshipAsInitiator.documents,
                ...friendshipAsReceiver.documents
            ];

            if (friendshipDocuments.length === 0) {
                throw new Error('Friendship not found');
            }

            // –£–¥–∞–ª—è–µ–º –¥—Ä—É–∂–±—É
            await database.deleteDocument(
                process.env.NEXT_PUBLIC_DATABASE_ID!,
                process.env.NEXT_PUBLIC_COLLECTION_ID_FRIENDS!,
                friendshipDocuments[0].$id
            );

            // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ UI
            set(state => ({
                friends: state.friends.filter(f => f.friendId !== friendId)
            }));

            toast.success('Friend removed successfully');
            
            // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –¥—Ä—É–∑–µ–π
            await get().loadFriends();
        } catch (error: any) {
            console.error('Error removing friend:', error);
            set({ error: error.message || 'Failed to remove friend' });
            toast.error(error.message || 'Failed to remove friend');
        } finally {
            set({ loading: false });
        }
    },

    acceptFriendRequest: async (requestId: string) => {
        try {
            set({ loading: true, error: null });
            // Try to get userId from localStorage first
            let userId = localStorage.getItem('userId');
            
            // If userId is not in localStorage, try to get it from the current session
            if (!userId) {
                try {
                    const currentAccount = await account.get();
                    if (currentAccount) {
                        userId = currentAccount.$id;
                        // Store it in localStorage for future use
                        localStorage.setItem('userId', userId);
                    }
                } catch (error) {
                    console.error('Error getting current user:', error);
                }
            }
            
            if (!userId) throw new Error('User not authenticated');

            // –ù–∞—Ö–æ–¥–∏–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –¥—Ä—É–∂–±—É
            const request = await database.getDocument(
                process.env.NEXT_PUBLIC_DATABASE_ID!,
                process.env.NEXT_PUBLIC_COLLECTION_ID_FRIENDS!,
                requestId
            );

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∑–∞–ø—Ä–æ—Å –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω —Ç–µ–∫—É—â–µ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            if (request.friend_id !== userId) {
                throw new Error('You can only accept your own friend requests');
            }

            // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–ø—Ä–æ—Å–∞
            await database.updateDocument(
                process.env.NEXT_PUBLIC_DATABASE_ID!,
                process.env.NEXT_PUBLIC_COLLECTION_ID_FRIENDS!,
                requestId,
                {
                    status: 'accepted',
                    updated_at: new Date().toISOString()
                }
            );

            // –ü–æ–ª—É—á–∞–µ–º –∏–º—è —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ —Å–æ–∑–¥–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è –∑–∞–ø—Ä–æ—Å–∞
            const currentUserName = await getUserName(userId);
            await createFriendNotification(
                request.user_id,
                'friend_accepted',
                currentUserName,
                userId,
                requestId
            );

            toast.success('Friend request accepted!');
            
            // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–∫–∏ –¥—Ä—É–∑–µ–π –∏ –∑–∞–ø—Ä–æ—Å–æ–≤
            await Promise.all([
                get().loadFriends(),
                get().loadPendingRequests()
            ]);
        } catch (error: any) {
            console.error('Error accepting friend request:', error);
            set({ error: error.message || 'Failed to accept friend request' });
            toast.error(error.message || 'Failed to accept friend request');
        } finally {
            set({ loading: false });
        }
    },

    rejectFriendRequest: async (requestId: string) => {
        try {
            set({ loading: true, error: null });
            // Try to get userId from localStorage first
            let userId = localStorage.getItem('userId');
            
            // If userId is not in localStorage, try to get it from the current session
            if (!userId) {
                try {
                    const currentAccount = await account.get();
                    if (currentAccount) {
                        userId = currentAccount.$id;
                        // Store it in localStorage for future use
                        localStorage.setItem('userId', userId);
                    }
                } catch (error) {
                    console.error('Error getting current user:', error);
                }
            }
            
            if (!userId) throw new Error('User not authenticated');

            // –ù–∞—Ö–æ–¥–∏–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –¥—Ä—É–∂–±—É
            const request = await database.getDocument(
                process.env.NEXT_PUBLIC_DATABASE_ID!,
                process.env.NEXT_PUBLIC_COLLECTION_ID_FRIENDS!,
                requestId
            );

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∑–∞–ø—Ä–æ—Å –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω —Ç–µ–∫—É—â–µ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            if (request.friend_id !== userId) {
                throw new Error('You can only reject your own friend requests');
            }

            // –£–¥–∞–ª—è–µ–º –∑–∞–ø—Ä–æ—Å
            await database.deleteDocument(
                process.env.NEXT_PUBLIC_DATABASE_ID!,
                process.env.NEXT_PUBLIC_COLLECTION_ID_FRIENDS!,
                requestId
            );
            
            toast.success('Friend request rejected');
            
            // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –∑–∞–ø—Ä–æ—Å–æ–≤
            await get().loadPendingRequests();
        } catch (error: any) {
            console.error('Error rejecting friend request:', error);
            set({ error: error.message || 'Failed to reject friend request' });
            toast.error(error.message || 'Failed to reject friend request');
        } finally {
            set({ loading: false });
        }
    },

    loadFriends: async (currentUserId?: string) => {
        try {
            set({ loading: true, error: null });
            // Try to get userId from passed parameter first
            let userId = currentUserId;
            
            // Try to get userId from localStorage if not passed as parameter
            if (!userId) {
                const storedUserId = localStorage.getItem('userId');
                if (storedUserId) {
                    userId = storedUserId;
                }
            }
            
            // If userId is still not found, try to get it from the current session
            if (!userId) {
                try {
                    const currentAccount = await account.get();
                    if (currentAccount) {
                        userId = currentAccount.$id;
                        // Store it in localStorage for future use
                        localStorage.setItem('userId', userId);
                    }
                } catch (error) {
                    console.error('Error getting current user:', error);
                }
            }
            
            if (!userId) {
                set({ friends: [] });
                return;
            }

            // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥—Ä—É–∑–µ–π, –≥–¥–µ –º—ã —è–≤–ª—è–µ–º—Å—è –∏–Ω–∏—Ü–∏–∞—Ç–æ—Ä–æ–º
            const friendsAsInitiator = await database.listDocuments(
                process.env.NEXT_PUBLIC_DATABASE_ID!,
                process.env.NEXT_PUBLIC_COLLECTION_ID_FRIENDS!,
                [
                    Query.equal('user_id', userId),
                    Query.equal('status', 'accepted')
                ]
            );

            // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥—Ä—É–∑–µ–π, –≥–¥–µ –º—ã —è–≤–ª—è–µ–º—Å—è –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–º
            const friendsAsReceiver = await database.listDocuments(
                process.env.NEXT_PUBLIC_DATABASE_ID!,
                process.env.NEXT_PUBLIC_COLLECTION_ID_FRIENDS!,
                [
                    Query.equal('friend_id', userId),
                    Query.equal('status', 'accepted')
                ]
            );

            // –û–±—ä–µ–¥–∏–Ω—è–µ–º –∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            const allFriendships = [...friendsAsInitiator.documents, ...friendsAsReceiver.documents];
            const formattedFriends = await Promise.all(
                allFriendships.map(async (friendship) => {
                    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º ID –¥—Ä—É–≥–∞ (–Ω–µ –Ω–∞—Å)
                    const friendId = friendship.user_id === userId ? friendship.friend_id : friendship.user_id;
                    
                    // –ó–∞–≥—Ä—É–∂–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å –¥—Ä—É–≥–∞
                    const friendProfile = await getUserProfile(friendId);
                    
                    return {
                        id: friendship.$id,
                        userId: friendship.user_id,
                        friendId: friendId,
                        status: friendship.status,
                        createdAt: friendship.created_at,
                        updatedAt: friendship.updated_at,
                        profile: friendProfile
                    };
                })
            );

            set({ friends: formattedFriends });
        } catch (error) {
            console.error('Error loading friends:', error);
            set({ error: 'Failed to load friends' });
        } finally {
            set({ loading: false });
        }
    },

    loadPendingRequests: async (currentUserId?: string) => {
        try {
            set({ loading: true, error: null });
            // Try to get userId from passed parameter first
            let userId = currentUserId;
            
            // Try to get userId from localStorage if not passed as parameter
            if (!userId) {
                const storedUserId = localStorage.getItem('userId');
                if (storedUserId) {
                    userId = storedUserId;
                }
            }
            
            // If userId is still not found, try to get it from the current session
            if (!userId) {
                try {
                    const currentAccount = await account.get();
                    if (currentAccount) {
                        userId = currentAccount.$id;
                        // Store it in localStorage for future use
                        localStorage.setItem('userId', userId);
                    }
                } catch (error) {
                    console.error('Error getting current user:', error);
                }
            }
            
            if (!userId) {
                set({ pendingRequests: [] });
                return;
            }

            // –ó–∞–≥—Ä—É–∂–∞–µ–º –≤—Ö–æ–¥—è—â–∏–µ –∑–∞–ø—Ä–æ—Å—ã –Ω–∞ –¥—Ä—É–∂–±—É
            const pendingRequests = await database.listDocuments(
                process.env.NEXT_PUBLIC_DATABASE_ID!,
                process.env.NEXT_PUBLIC_COLLECTION_ID_FRIENDS!,
                [
                    Query.equal('friend_id', userId),
                    Query.equal('status', 'pending')
                ]
            );

            // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            const formattedRequests = await Promise.all(
                pendingRequests.documents.map(async (request) => {
                    // –ó–∞–≥—Ä—É–∂–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è
                    const senderProfile = await getUserProfile(request.user_id);
                    
                    return {
                        id: request.$id,
                        userId: request.user_id,
                        friendId: request.friend_id,
                        status: request.status,
                        createdAt: request.created_at,
                        updatedAt: request.updated_at,
                        profile: senderProfile
                    };
                })
            );

            set({ pendingRequests: formattedRequests });
        } catch (error) {
            console.error('Error loading pending requests:', error);
            set({ error: 'Failed to load pending requests' });
        } finally {
            set({ loading: false });
        }
    },

    loadSentRequests: async (currentUserId?: string) => {
        try {
            set({ loading: true, error: null });
            // Try to get userId from passed parameter first
            let userId = currentUserId;
            
            // Try to get userId from localStorage if not passed as parameter
            if (!userId) {
                const storedUserId = localStorage.getItem('userId');
                if (storedUserId) {
                    userId = storedUserId;
                }
            }
            
            // If userId is still not found, try to get it from the current session
            if (!userId) {
                try {
                    const currentAccount = await account.get();
                    if (currentAccount) {
                        userId = currentAccount.$id;
                        // Store it in localStorage for future use
                        localStorage.setItem('userId', userId);
                    }
                } catch (error) {
                    console.error('Error getting current user:', error);
                }
            }
            
            if (!userId) {
                set({ sentRequests: [] });
                return;
            }

            // –ó–∞–≥—Ä—É–∂–∞–µ–º –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã –Ω–∞ –¥—Ä—É–∂–±—É
            const sentRequests = await database.listDocuments(
                process.env.NEXT_PUBLIC_DATABASE_ID!,
                process.env.NEXT_PUBLIC_COLLECTION_ID_FRIENDS!,
                [
                    Query.equal('user_id', userId),
                    Query.equal('status', 'pending')
                ]
            );

            // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            const formattedRequests = await Promise.all(
                sentRequests.documents.map(async (request) => {
                    // –ó–∞–≥—Ä—É–∂–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—É—á–∞—Ç–µ–ª—è
                    const receiverProfile = await getUserProfile(request.friend_id);
                    
                    return {
                        id: request.$id,
                        userId: request.user_id,
                        friendId: request.friend_id,
                        status: request.status,
                        createdAt: request.created_at,
                        updatedAt: request.updated_at,
                        profile: receiverProfile
                    };
                })
            );

            set({ sentRequests: formattedRequests });
        } catch (error) {
            console.error('Error loading sent requests:', error);
            set({ error: 'Failed to load sent requests' });
        } finally {
            set({ loading: false });
        }
    }
})); 