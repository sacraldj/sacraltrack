import React, { useEffect, useState } from 'react';
import { motion, AnimatePresence } from 'framer-motion';

interface ProcessingProgressProps {
    stage: string;
    progress: number;
    isProcessing: boolean;
    onCancel?: () => void;
}

const ProcessingProgress: React.FC<ProcessingProgressProps> = ({ 
    stage, 
    progress, 
    isProcessing,
    onCancel 
}) => {
    const [stageHistory, setStageHistory] = useState<{id: string, progress: number}[]>([]);
    
    // –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é —ç—Ç–∞–ø–æ–≤ –¥–ª—è –ª—É—á—à–µ–π –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏
    useEffect(() => {
        if (!isProcessing) {
            setStageHistory([]);
            return;
        }
        
        if (stage && !stageHistory.some(s => s.id === stage)) {
            setStageHistory(prev => [...prev, { id: stage, progress }]);
        } else if (stage) {
            setStageHistory(prev => 
                prev.map(s => s.id === stage ? { ...s, progress } : s)
            );
        }
    }, [stage, progress, isProcessing]);
    
    if (!isProcessing) return null;

    // Define the stages and their associated icons/colors/descriptions
    const stages = [
        { 
            id: 'Uploading WAV', 
            icon: 'üéµ', 
            color: 'from-blue-400 to-purple-500',
            description: '–û—Ç–ø—Ä–∞–≤–∫–∞ WAV —Ñ–∞–π–ª–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä (–¥–æ 12 –º–∏–Ω—É—Ç)',
        },
        { 
            id: 'Converting to MP3', 
            icon: 'üîÑ', 
            color: 'from-purple-500 to-pink-500',
            description: '–ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –≤ MP3 –¥–ª—è –ª—É—á—à–µ–≥–æ –∫–∞—á–µ—Å—Ç–≤–∞ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è',
        },
        { 
            id: 'Segmenting audio', 
            icon: '‚úÇÔ∏è', 
            color: 'from-pink-500 to-orange-500',
            description: '–†–∞–∑–¥–µ–ª–µ–Ω–∏–µ –Ω–∞ —Å–µ–≥–º–µ–Ω—Ç—ã –¥–ª—è —Å—Ç—Ä–∏–º–∏–Ω–≥–æ–≤–æ–≥–æ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è',
        },
        { 
            id: 'Uploading to storage', 
            icon: '‚òÅÔ∏è', 
            color: 'from-orange-500 to-green-500',
            description: '–ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–æ–≤ –≤ –æ–±–ª–∞—á–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ',
        },
        { 
            id: 'Generating IDs', 
            icon: 'üîë', 
            color: 'from-green-500 to-teal-500',
            description: '–°–æ–∑–¥–∞–Ω–∏–µ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–æ–≤ –¥–ª—è —Å–µ–≥–º–µ–Ω—Ç–æ–≤',
        },
        { 
            id: 'Creating playlist', 
            icon: 'üìã', 
            color: 'from-teal-500 to-cyan-500',
            description: '–§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ M3U8 –ø–ª–µ–π–ª–∏—Å—Ç–∞ –¥–ª—è –ø–æ—Ç–æ–∫–æ–≤–æ–≥–æ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è',
        },
        { 
            id: 'Uploading cover image', 
            icon: 'üñºÔ∏è', 
            color: 'from-cyan-500 to-blue-500',
            description: '–ó–∞–≥—Ä—É–∑–∫–∞ –æ–±–ª–æ–∂–∫–∏ —Ç—Ä–µ–∫–∞ –≤ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ',
        },
        { 
            id: 'Finalizing upload', 
            icon: '‚ú®', 
            color: 'from-blue-500 to-indigo-500',
            description: '–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –ø—Ä–æ—Ü–µ—Å—Å–∞ –∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Ç—Ä–µ–∫–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö',
        },
    ];

    // Find current stage index
    const currentStageIndex = stages.findIndex(s => s.id === stage) !== -1 
        ? stages.findIndex(s => s.id === stage) 
        : stages.findIndex(s => stage.includes(s.id));
    
    const currentStage = currentStageIndex !== -1 
        ? stages[currentStageIndex] 
        : { 
            id: stage, 
            icon: 'üîÑ', 
            color: 'from-purple-400 to-blue-500',
            description: '–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö...'
        };

    // –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –æ—Ç–º–µ–Ω—ã –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞ —Ç–µ–∫—É—â–µ–º —ç—Ç–∞–ø–µ
    // –ö–∞–∫ –ø—Ä–∞–≤–∏–ª–æ, —ç—Ç–æ –≤–æ–∑–º–æ–∂–Ω–æ —Ç–æ–ª—å–∫–æ –Ω–∞ –Ω–∞—á–∞–ª—å–Ω—ã—Ö —ç—Ç–∞–ø–∞—Ö
    const canBeCancelled = currentStageIndex <= 4; // –ú–æ–∂–Ω–æ –æ—Ç–º–µ–Ω–∏—Ç—å –¥–æ —ç—Ç–∞–ø–∞ "Uploading to storage"

    // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º—ã–π –ø—Ä–æ–≥—Ä–µ—Å—Å —Å —É—á–µ—Ç–æ–º –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö —ç—Ç–∞–ø–æ–≤
    const calculateOverallProgress = () => {
        // –ï—Å–ª–∏ —Ç–µ–∫—É—â–∏–π —ç—Ç–∞–ø –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø—Ä–æ—Å—Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –æ–±—â–∏–π –ø—Ä–æ–≥—Ä–µ—Å—Å
        if (currentStageIndex === -1) return progress;
        
        // –ï—Å–ª–∏ —ç—Ç–∞–ø –ø–æ—Å–ª–µ–¥–Ω–∏–π, –ø—Ä–æ—Å—Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –µ–≥–æ –ø—Ä–æ–≥—Ä–µ—Å—Å
        if (currentStageIndex === stages.length - 1) return progress;
        
        // –ö–∞–∂–¥—ã–π —ç—Ç–∞–ø –∏–º–µ–µ—Ç –≤–µ—Å –≤ –æ–±—â–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å–µ
        const stageWeight = 100 / stages.length;
        
        // –ü—Ä–æ–≥—Ä–µ—Å—Å –æ—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö —ç—Ç–∞–ø–æ–≤
        const completedProgress = currentStageIndex * stageWeight;
        
        // –ü—Ä–æ–≥—Ä–µ—Å—Å —Ç–µ–∫—É—â–µ–≥–æ —ç—Ç–∞–ø–∞ –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö –µ–≥–æ –≤–µ—Å–∞
        const currentProgress = (progress / 100) * stageWeight;
        
        return Math.min(99.9, completedProgress + currentProgress);
    };

    return (
        <div className={`fixed inset-0 z-50 bg-black/80 flex items-center justify-center transition-opacity duration-300 ${isProcessing ? 'opacity-100' : 'opacity-0 pointer-events-none'}`}>
            <motion.div 
                initial={{ opacity: 0, scale: 0.9 }}
                animate={{ opacity: 1, scale: 1 }}
                className="bg-[#2A184B]/90 p-8 rounded-2xl max-w-md w-full shadow-2xl border border-white/10 backdrop-blur-sm"
            >
                <div className="flex items-center justify-between mb-2">
                    <h3 className="text-xl font-bold text-white flex items-center">
                        <span className="mr-2 text-2xl">{currentStage.icon}</span>
                        {currentStage.id}
                    </h3>
                    
                    {/* –ö–Ω–æ–ø–∫–∞ –æ—Ç–º–µ–Ω—ã –ø—Ä–æ—Ü–µ—Å—Å–∞ –∑–∞–≥—Ä—É–∑–∫–∏ */}
                    {onCancel && canBeCancelled && (
                        <motion.button
                            whileHover={{ scale: 1.05 }}
                            whileTap={{ scale: 0.95 }}
                            onClick={onCancel}
                            className="text-white/60 hover:text-white/90 p-2"
                            title="–û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–≥—Ä—É–∑–∫—É"
                        >
                            <svg className="w-5 h-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12" />
                            </svg>
                        </motion.button>
                    )}
                </div>
                
                {/* –û–ø–∏—Å–∞–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ —ç—Ç–∞–ø–∞ */}
                <p className="text-sm text-white/60 mb-4">
                    {currentStage.description}
                </p>
                
                {/* Main progress bar */}
                <div className="h-3 w-full bg-white/10 rounded-full mb-6 overflow-hidden">
                    <motion.div 
                        className={`h-full rounded-full bg-gradient-to-r ${currentStage.color}`}
                        style={{ width: `${progress}%` }}
                        initial={{ width: 0 }}
                        animate={{ width: `${progress}%` }}
                        transition={{ duration: 0.3 }}
                    />
                </div>
                
                {/* Overall progress bar */}
                <div className="h-2 w-full bg-white/5 rounded-full mb-2 overflow-hidden">
                    <motion.div 
                        className="h-full rounded-full bg-gradient-to-r from-blue-400 via-purple-500 to-pink-500"
                        style={{ width: `${calculateOverallProgress()}%` }}
                        initial={{ width: 0 }}
                        animate={{ width: `${calculateOverallProgress()}%` }}
                        transition={{ duration: 0.3 }}
                    />
                </div>
                
                {/* Percentage and glowing animation */}
                <div className="flex justify-between items-center mb-5">
                    <p className="text-sm text-white/60">
                        {currentStageIndex + 1} –∏–∑ {stages.length} —ç—Ç–∞–ø–æ–≤
                        <span className="ml-1 text-white/40">({Math.round(calculateOverallProgress())}% –≤—Å–µ–≥–æ)</span>
                    </p>
                    <div className="flex items-center">
                        <motion.div
                            animate={{ 
                                scale: [1, 1.05, 1],
                                opacity: [1, 0.8, 1]
                            }}
                            transition={{ 
                                repeat: Infinity, 
                                duration: 1.5,
                                ease: "easeInOut"
                            }}
                            className="text-xl font-bold text-white"
                        >
                            {Math.round(progress)}%
                        </motion.div>
                    </div>
                </div>
                
                {/* –ò—Å—Ç–æ—Ä–∏—è –ø–æ—Å–ª–µ–¥–Ω–∏—Ö 3-—Ö —ç—Ç–∞–ø–æ–≤ –¥–ª—è –ª—É—á—à–µ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ */}
                <div className="mb-4">
                    <h4 className="text-sm text-white/60 mb-2">–ò—Å—Ç–æ—Ä–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏:</h4>
                    <div className="space-y-2">
                        {stageHistory.slice(-3).map((item, index) => (
                            <motion.div
                                key={item.id}
                                initial={{ opacity: 0, y: 10 }}
                                animate={{ opacity: 1, y: 0 }}
                                transition={{ delay: index * 0.1 }}
                                className="flex items-center justify-between text-sm text-white/70 bg-white/5 rounded-lg p-2"
                            >
                                <div className="flex items-center">
                                    <span className="mr-2">
                                        {item.progress >= 100 ? '‚úÖ' : 'üîÑ'}
                                    </span>
                                    <span>{item.id}</span>
                                </div>
                                <span className="font-medium">
                                    {Math.round(item.progress)}%
                                </span>
                            </motion.div>
                        ))}
                    </div>
                </div>
                
                {/* Stage indicators - —Ç–µ–ø–µ—Ä—å —Å –ø–æ–¥—Å–≤–µ—Ç–∫–æ–π —Ç–µ–∫—É—â–µ–≥–æ —ç—Ç–∞–ø–∞ –∏ –ø—Ä–æ–≥—Ä–µ—Å—Å–æ–º */}
                <div className="grid grid-cols-4 gap-2">
                    {stages.map((s, i) => (
                        <motion.div 
                            key={s.id}
                            initial={{ opacity: 0.5, y: 10 }}
                            animate={{ 
                                opacity: i <= currentStageIndex ? 1 : 0.5,
                                y: 0,
                                scale: i === currentStageIndex ? 1.1 : 1
                            }}
                            transition={{ delay: i * 0.1 }}
                            className={`flex flex-col items-center p-2 rounded-lg cursor-help
                                ${i === currentStageIndex 
                                    ? 'bg-white/10 ring-1 ring-white/20 text-white' 
                                    : i < currentStageIndex 
                                        ? 'bg-white/10 text-white/70' 
                                        : 'bg-white/5 text-white/40'
                                }`}
                            title={s.description}
                        >
                            <span className="text-xl mb-1">{s.icon}</span>
                            <span className="text-xs text-center whitespace-nowrap overflow-hidden text-ellipsis w-full">
                                {s.id.length > 10 ? `${s.id.substring(0, 10)}...` : s.id}
                            </span>
                            
                            {/* Stage progress indicator */}
                            {i === currentStageIndex && (
                                <motion.div 
                                    className="mt-1 h-1 w-full bg-white/10 rounded-full overflow-hidden"
                                >
                                    <motion.div
                                        className="h-full bg-gradient-to-r from-cyan-400 to-pink-400"
                                        initial={{ width: 0 }}
                                        animate={{ width: `${progress}%` }}
                                        transition={{ duration: 0.3 }}
                                    />
                                </motion.div>
                            )}
                        </motion.div>
                    ))}
                </div>
                
                {/* Animated particles for flair */}
                <div className="relative h-12 overflow-hidden mt-5">
                    {Array.from({ length: 10 }).map((_, i) => (
                        <motion.div
                            key={i}
                            className="absolute w-1 h-1 rounded-full bg-white/40"
                            initial={{ 
                                x: Math.random() * 100 + "%", 
                                y: "100%",
                                opacity: 0.2 + Math.random() * 0.5,
                                scale: 0.5 + Math.random() * 0.5,
                            }}
                            animate={{ 
                                y: "0%", 
                                x: `calc(${Math.random() * 100}% + ${Math.random() * 40 - 20}px)`,
                                opacity: 0
                            }}
                            transition={{ 
                                duration: 1 + Math.random() * 2,
                                repeat: Infinity,
                                repeatDelay: Math.random() * 2,
                                ease: "easeOut"
                            }}
                        />
                    ))}
                </div>
                
                {/* Information about cancellation */}
                {onCancel && !canBeCancelled && (
                    <motion.p
                        initial={{ opacity: 0 }}
                        animate={{ opacity: 1 }}
                        transition={{ delay: 1 }}
                        className="mt-4 text-center text-xs text-white/40"
                    >
                        –ù–∞ –¥–∞–Ω–Ω–æ–º —ç—Ç–∞–ø–µ –æ—Ç–º–µ–Ω–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–∞
                    </motion.p>
                )}
            </motion.div>
        </div>
    );
};

export default ProcessingProgress; 